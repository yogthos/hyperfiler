declare const _default: "\n/**\n * A Z85 decoder function that decodes Z85-encoded strings into decoded\n * ArrayBuffers. Implementation is based off of the implementation at\n * 'https://github.com/cometd/cometd-Z85'.\n *\n * @license Apache-2.0\n * @see https://github.com/cometd/cometd-Z85\n * @see https://github.com/cometd/cometd-Z85/blob/master/LICENSE\n */\n\n/**\n * Z85 decodes the given input string into an 'ArrayBuffer'.\n *\n * @example\n * import { Z85 } from './z85';\n *\n * // Creating the Z85 encoder and decoder.\n * const z85 = new Z85();\n *\n * // Decoding a Z85-encoded 'hello world' string.\n * const z85EncodedString = 'xK#0@zY<mxA+]m';\n * const z85DecodedArrayBuffer = z85.decode(z85EncodedString);\n *\n * // When decoded, you will see the string 'hello world'. The TextEncoder\n * // can be used to encode the array buffer to a UTF-8 encoded string.\n * const z85DecodedString = new TextDecoder().decode(z85DecodedArrayBuffer);\n *\n * @param string a Z85-encoded string.\n * @returns a Z85 decoded array buffer.\n */\nfunction decode(string) {\n  // The Z85 character encoding table.\n  const z85EncodeTable = [\n    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n    'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',\n    'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',\n    'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D',\n    'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N',\n    'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',\n    'Y', 'Z', '.', '-', ':', '+', '=', '^', '!', '/',\n    '*', '?', '&', '<', '>', '(', ')', '[', ']', '{',\n    '}', '@', '%', '$', '#',\n  ];\n\n  // The Z85 character decoding table.\n  const z85DecodeTable = [\n    0x00, 0x44, 0x00, 0x54, 0x53, 0x52, 0x48, 0x00,\n    0x4B, 0x4C, 0x46, 0x41, 0x00, 0x3F, 0x3E, 0x45,\n    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n    0x08, 0x09, 0x40, 0x00, 0x49, 0x42, 0x4A, 0x47,\n    0x51, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A,\n    0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30, 0x31, 0x32,\n    0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A,\n    0x3B, 0x3C, 0x3D, 0x4D, 0x00, 0x4E, 0x43, 0x00,\n    0x00, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10,\n    0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,\n    0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20,\n    0x21, 0x22, 0x23, 0x4F, 0x00, 0x50, 0x00, 0x00,\n  ];\n\n  // Getting the remainder of modulo 5 of the length of the string.\n  const remainder = string.length % 5;\n\n  // Calculating the amount of padding needed for the buffer.\n  const padding = 5 - (remainder === 0 ? 5 : remainder);\n\n  // For each byte in the padding, encoding the padding and adding it to the\n  // provided string.\n  for (let p = 0; p < padding; p += 1) {\n    string += z85EncodeTable[z85EncodeTable.length - 1];\n  }\n\n  // Calculating the length of the string given the additional padding bytes.\n  const length = string.length;\n\n  // Creating an array buffer of the required length given the Z85-encoded\n  // string, and creating a dataview from this buffer.\n  const buffer = new ArrayBuffer(((length * 4) / 5) - padding);\n  const view = new DataView(buffer);\n\n  // Decoding the Z85-encoded string into an ArrayBuffer.\n  let value = 0;\n  let charIdx = 0;\n  let byteIdx = 0;\n  for (let i = 0; i < length; i += 1) {\n    // Getting the code point at the given character index in the Z85-encoded\n    // string, and incrementing the character index.\n    const code = string.charCodeAt(charIdx) - 32;\n    charIdx += 1;\n\n    // Getting the decoded byte from the code point.\n    value = value * 85 + z85DecodeTable[code];\n\n    // If the current character index is divisable by 5, calculting the\n    // Z85-decoded byte.\n    if (charIdx % 5 === 0) {\n      // Setting the divisor for the Z85 decoding.\n      let divisor = 256 * 256 * 256;\n\n      // Adding the bytes to the dataview.\n      while (divisor >= 1) {\n        if (byteIdx < view.byteLength) {\n          view.setUint8(byteIdx, Math.floor(value / divisor) % 256);\n\n          byteIdx += 1;\n        }\n\n        // Updating the divisor.\n        divisor /= 256;\n      }\n\n      // Updating the value.\n      value = 0;\n    }\n  }\n\n  return buffer;\n}\n";
export default _default;
//# sourceMappingURL=z85-decoder.d.ts.map